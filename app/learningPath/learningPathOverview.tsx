import React, { useState } from 'react';
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Modal } from 'react-native';
import { Button } from 'react-native-paper';
import { RouteProp, useRoute } from '@react-navigation/native';

type RouteParams = {
  LearningPath: {
    currentLevel: string;
    targetLevel: string;
  };
};

const stageDetails = [
  [
    // Giai ƒëo·∫°n 1
    {
      day: 1,
      title: "Day 1",
      items: [
        { text: "Gi·ªõi thi·ªáu" },
        { text: "T√¨m hi·ªÉu v·ªÅ ƒë·ªÅ thi Toeic v√† m·ªôt s·ªë l∆∞u √Ω" }
      ]
    },
    {
      day: 2,
      title: "Day 2",
      items: [
        { text: "H·ªçc t·ª´ v·ª±ng c∆° b·∫£n" },
        { text: "B√†i t·∫≠p ƒëi·ªÅn t·ª´ v√†o ch·ªó tr·ªëng", sub: "5 b√†i t·∫≠p" },
        { text: "B√†i t·∫≠p tr·∫Øc nghi·ªám", sub: "5 b√†i t·∫≠p" },
        { text: "T·ª´ lo·∫°i Danh t·ª´: ƒê·ªãnh nghƒ©a, Ch·ª©c nƒÉng" },
      ]
    }
  ],
  [
    // Giai ƒëo·∫°n 2
    {
      day: 1,
      title: "Day 1",
      items: [
        { text: "√în t·∫≠p ki·∫øn th·ª©c trung c·∫•p" },
        { text: "B√†i t·∫≠p ƒë·ªçc hi·ªÉu", sub: "10 b√†i t·∫≠p" },
        { text: "B√†i t·∫≠p nghe", sub: "10 b√†i t·∫≠p" },
      ]
    },
    {
      day: 2,
      title: "Day 2",
      items: [
        { text: "T·ª´ v·ª±ng n√¢ng cao" },
        { text: "B√†i t·∫≠p ƒëi·ªÅn t·ª´ n√¢ng cao", sub: "8 b√†i t·∫≠p" },
        { text: "B√†i t·∫≠p tr·∫Øc nghi·ªám n√¢ng cao", sub: "8 b√†i t·∫≠p" },
      ]
    }
  ],
  [
    // Giai ƒëo·∫°n 3
    {
      day: 1,
      title: "Day 1",
      items: [
        { text: "Luy·ªán ƒë·ªÅ Toeic th·ª±c t·∫ø" },
        { text: "ƒê·ªÅ s·ªë 1", sub: "200 c√¢u" },
      ]
    },
    {
      day: 2,
      title: "Day 2",
      items: [
        { text: "Luy·ªán ƒë·ªÅ Toeic th·ª±c t·∫ø" },
        { text: "ƒê·ªÅ s·ªë 2", sub: "200 c√¢u" },
      ]
    }
  ]
];

const LearningPathScreen = () => {
  const route = useRoute<RouteProp<RouteParams, 'LearningPath'>>();
  const { currentLevel, targetLevel } = route.params;
  const [showDetail, setShowDetail] = useState<number | false>(false);

  // Determine number of stages based on currentLevel and targetLevel
  let stages = [
    {
      title: "Giai ƒëo·∫°n 1",
      info: [
        `‚Ä¢ ƒêi·ªÉm ƒë·∫ßu v√†o: ${currentLevel}`,
        `‚Ä¢ M·ª•c ti√™u ƒë·∫°t: ~${targetLevel} ƒëi·ªÉm`,
        "‚Ä¢ Danh s√°ch b√†i h·ªçc: 45 b√†i",
        "‚Ä¢ S·ªë l∆∞·ª£ng b√†i t·∫≠p: 1912 b√†i",
      ],
    },
    {
      title: "Giai ƒëo·∫°n 2",
      info: [
        `‚Ä¢ ƒêi·ªÉm ƒë·∫ßu v√†o: ${targetLevel}`,
        "‚Ä¢ M·ª•c ti√™u ƒë·∫°t: ~800 ƒëi·ªÉm",
        "‚Ä¢ Danh s√°ch b√†i h·ªçc: 30 b√†i",
        "‚Ä¢ S·ªë l∆∞·ª£ng b√†i t·∫≠p: 1200 b√†i",
      ],
    },
    {
      title: "Giai ƒëo·∫°n 3",
      info: [
        "‚Ä¢ ƒêi·ªÉm ƒë·∫ßu v√†o: 800",
        "‚Ä¢ M·ª•c ti√™u ƒë·∫°t: ~900 ƒëi·ªÉm",
        "‚Ä¢ Danh s√°ch b√†i h·ªçc: 20 b√†i",
        "‚Ä¢ S·ªë l∆∞·ª£ng b√†i t·∫≠p: 800 b√†i",
      ],
    },
  ];

  let stageCount = 3;
  if (currentLevel === '0-150' && targetLevel === '300') {
    stageCount = 1;
  } else if (currentLevel === '0-150' && targetLevel === '650+') {
    stageCount = 2;
  } else if (currentLevel === '300-450' && targetLevel === '650+') {
    stageCount = 1;
    stages = [stages[1]];
  } else if (currentLevel === '300-450' && targetLevel === '900') {
    stageCount = 2;
    stages = [stages[1], stages[2]];
  } else if (currentLevel === '600-700' && targetLevel === '900') {
    stageCount = 1;
    stages = [stages[2]];
  }

  const levelLabel = (level: string) => {
    switch (level) {
      case '0': return 'M·∫•t g·ªëc';
      case '300': return 'Trung c·∫•p';
      case '600': return 'Cao c·∫•p';
      case '650': return 'Kh√°';
      case '900': return 'Xu·∫•t s·∫Øc';
      default: return '';
    }
  };

  const handleStartLearning = () => {
    // Chuy·ªÉn sang trang learningDayList
    // N·∫øu mu·ªën truy·ªÅn params, th√™m params v√†o push
    // router.push({ pathname: '/learningPath/learningDayList', params: { ... } });
    // N·∫øu kh√¥ng c·∫ßn params:
    // @ts-ignore
    if (typeof window !== "undefined" && window.location) {
      window.location.href = '/learningPath/learningDayList';
    } else if (typeof require !== "undefined") {
      // Native Expo Router
      // @ts-ignore
      const { useRouter } = require('expo-router');
      const router = useRouter();
      router.push('/learningPath/learningDayList');
    }
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.header}>L·ªô tr√¨nh h·ªçc ƒë∆∞·ª£c x√¢y d·ª±ng cho b·∫°n</Text>

      <View style={styles.resultBox}>
        <Text>üéØ ƒêi·ªÉm ƒë·∫ßu v√†o: {currentLevel} ({levelLabel(currentLevel)})</Text>
        <Text>üìà M·ª•c ti√™u: {targetLevel} ({levelLabel(targetLevel)})</Text>
      </View>

      {/* Render stages based on logic */}
      {stages.slice(0, stageCount).map((stage, idx) => (
        <View style={styles.stageBox} key={stage.title}>
          <Text style={styles.stageTitle}>{stage.title}</Text>
          {stage.info.map((line, i) => (
            <Text key={i}>{line}</Text>
          ))}
          <TouchableOpacity onPress={() => setShowDetail(idx)}>
            <Text style={styles.detailLink}>Xem chi ti·∫øt</Text>
          </TouchableOpacity>
        </View>
      ))}

      {/* Modal hi·ªÉn th·ªã chi ti·∫øt l·ªô tr√¨nh */}
      <Modal visible={showDetail !== false} animationType="slide" onRequestClose={() => setShowDetail(false)}>
        <View style={styles.detailModalContainer}>
          <View style={styles.detailHeader}>
            <TouchableOpacity onPress={() => setShowDetail(false)}>
              <Text style={styles.closeButton}>‚Üê</Text>
            </TouchableOpacity>
            <Text style={styles.detailTitle}>L·ªô tr√¨nh h·ªçc t·∫≠p</Text>
            <View style={{ width: 30 }} />
          </View>
          <ScrollView style={styles.detailScroll}>
            {(showDetail !== false ? stageDetails[showDetail] : []).map((day, idx) => (
              <View key={day.day} style={styles.dayBlock}>
                <View style={styles.dayRow}>
                  <Text style={styles.dayNumber}>{idx + 1}.</Text>
                  <Text style={styles.dayTitle}>{day.title}</Text>
                </View>
                {day.items.map((item, i) => (
                  <View key={i} style={styles.detailItemRow}>
                    <Text style={styles.detailBullet}>‚óã</Text>
                    <View style={{ flex: 1 }}>
                      <Text style={styles.detailItemText}>{item.text}</Text>
                      {item.sub && (
                        <Text style={styles.detailSubText}>{item.sub}</Text>
                      )}
                    </View>
                  </View>
                ))}
              </View>
            ))}
          </ScrollView>
        </View>
      </Modal>

      <View style={styles.buttonRow}>
        <Button mode="contained" onPress={handleStartLearning} style={styles.buttonGreen}>
          H·ªçc theo l·ªô tr√¨nh n√†y
        </Button>
      </View>
    </ScrollView>
  );
};

export default LearningPathScreen;

const styles = StyleSheet.create({
  container: { padding: 16, backgroundColor: '#fff' },
  header: { fontSize: 18, fontWeight: '600', marginBottom: 16 },
  resultBox: {
    backgroundColor: '#FFF9E5',
    borderLeftColor: '#FFD700',
    borderLeftWidth: 4,
    padding: 12,
    borderRadius: 6,
    marginBottom: 20,
  },
  stageBox: {
    backgroundColor: '#E0F8E9',
    padding: 14,
    borderRadius: 6,
  },
  stageTitle: { fontWeight: 'bold', color: '#008A44', marginBottom: 8 },
  detailLink: { marginTop: 8, color: '#007AFF', textDecorationLine: 'underline' },
  buttonRow: { marginTop: 24 },
  buttonGreen: { backgroundColor: '#00B383' },
  detailModalContainer: {
    flex: 1,
    backgroundColor: '#fff',
    paddingTop: 40,
  },
  detailHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingBottom: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
    backgroundColor: '#22C993',
  },
  closeButton: {
    fontSize: 24,
    color: '#fff',
    width: 30,
    textAlign: 'center',
    fontWeight: 'bold',
  },
  detailTitle: {
    flex: 1,
    textAlign: 'center',
    fontSize: 20,
    color: '#fff',
    fontWeight: 'bold',
  },
  detailScroll: {
    padding: 16,
    backgroundColor: '#fff',
  },
  dayBlock: {
    marginBottom: 18,
    borderLeftWidth: 2,
    borderLeftColor: '#22C993',
    paddingLeft: 16,
  },
  dayRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 4,
  },
  dayNumber: {
    fontWeight: 'bold',
    fontSize: 16,
    marginRight: 6,
    color: '#222',
  },
  dayTitle: {
    fontWeight: 'bold',
    fontSize: 16,
    color: '#222',
  },
  detailItemRow: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: 2,
    marginLeft: 8,
  },
  detailBullet: {
    fontSize: 16,
    color: '#888',
    marginRight: 8,
    marginTop: 2,
  },
  detailItemText: {
    fontSize: 15,
    color: '#333',
  },
  detailSubText: {
    fontSize: 13,
    color: '#888',
    marginLeft: 2,
    marginTop: 1,
  },
});
